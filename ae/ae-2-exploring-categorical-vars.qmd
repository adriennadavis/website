---
title: "Exploring categorical data"
output: 
   html_document
---

::: callout-important
This application exercise is due at noon on 16 Sept at 2:00pm.
:::

# Load packages, data

```{r load-packages, eval=FALSE, echo=TRUE}
#| warning: false
#| message: false

## loading library
library(tidyverse) # for data analysis and visualisation
library(here) # to organize files
```

Let's look at the data [on the web](https://github.com/cosmoduende/r-marvel-vs-dc/blob/main/dataset_shdb/heroesInformation.csv) prior to importing it and also to ensure that we know what it should look like when it is imported into R.

Now press "raw"

![](ae-2_images/click_raw.png)

Then copy the url:

![](ae-2_images/copy_url.png)

Download the file by inserting the URL below:

```{r download-file, eval=FALSE, echo=TRUE}
#| warning: false
#| message: false

fs::dir_create(here("data")) # create a data folder 
download.file(
  url = URL_HERE, # url of file to download
  destfile = here("data/comics.csv") # directory/name_of_file
)
```

Then click on the data folder in the "Files" panel.

![](ae-2_images/data_folder.png)

Double click on "comics.csv" and click on "Import Dataset..."

![](ae-2_images/import_dataset.png)

Check the data in the "Data Preview" pane and ensure that it looks as it should.

Next, click on the clipboard icon to copy the code from the "Code Preview" pane, then click "Import".

```{r import-data, eval=FALSE, echo=TRUE}
#| warning: false
#| message: false

#mPASTE THE CODE FROM "Code Preview" HERE
```

# Data

The `comics` dataset includes basic information scraped from the [superheroDb](https://www.superherodb.com/) for a [kaggle](https://www.kaggle.com/) competition.

```{r view-data, echo=TRUE, eval=FALSE}
#| message: false
#| warning: false

## An overview of the dataset and type of variables
glimpse(comics)
```

The first superhero is named "A-Bomb" he is male, with yellow eyes, human, with no hair. Marvel Comics created him and his skin color is not listed, but his height and weight are.

1.  Are there any differences between the data on the website above and the one in R? What are they? (Hint: which function can you use to see the whole dataset?)

2.  The \_\_\_ dataset has \_\_\_ observations and \_\_\_ variables.

3.  Classify all variables in the dataset as either: quantitative discrete, quantitative continuous, qualitative nominal, qualitative ordinal. Which of these variables is also categorical?

4.  How many publishers are there in this dataset?

    ```{r publisher_levels, eval=FALSE, echo=TRUE}
    #| message: false
    #| warning: false
    #| eval: false
    #| echo: true
    ## What is the distribution of price?
    comics %>% 
      distinct(Publisher) # finds the levels of publisher
    ```

5.  How many levels of the variable Alignment are there in this dataset?

    ```{r alignment_levels, eval=FALSE, echo=TRUE}
    #| message: false
    #| warning: false
    #| eval: false
    #| echo: true
    ## What is the distribution of price?
    comics %>% 
      INSERT_FUNCTION(INSERT_VARIABLE)
    ```

    A common way to represent the number of cases that fall into each combination of levels of two categorical variables, such as these, is with what's called a "contingency table."

6.  Which is the most common category in this contingency table? How many superheros are in that category? (note: please look at both of the next two blocks of code.)

    ```{r contingency_long, eval=FALSE, echo=TRUE}
    #| message: false
    #| warning: false
    #| eval: false
    #| echo: true
    ## What is the distribution of price?
    comics %>% 
      count(Publisher, Alignment) %>% # counts all combinations
      View()
    ```

    The long format above is difficult to see clearly. The format we normally use for contingency tables is the wide format.

    The third line of coding below takes a long table and makes it wide by moving the `Alignment` variable to the columns, and filling the values of the table with the count variable (`n`). The `names_from` argument tells R where the names of the new columns are coming from (i.e. what variable), and the `values_from` argument tells `R` where the values in the table are coming from. Here, the values we want in our table are stored as a variable labeled `n` in our table.

    ```{r contingency_wide, eval=FALSE, echo=TRUE}
    #| message: false
    #| warning: false
    #| eval: false
    #| echo: true

    comics %>% 
      count(Publisher, Alignment) %>%  # counts all combinations
      pivot_wider(names_from = Alignment, 
                  values_from = n) %>% # pivots from long to wide format
      View()

    ```

7.  There are about \_\_\_ good superheros for each bad superhero.

    ```{r alignment_plot, eval=FALSE, echo=TRUE}
    #| message: false
    #| warning: false
    #| eval: false
    #| echo: true

    ggplot(data = comics) +
      geom_bar(mapping = aes(x = Alignment)) 

    ```

8.  Look at the next two plots and find the difference between the two. What would make you use one plot over the other? Which plot shows that females are much more likely to be good superheros than bad? Which one shows that good superheros are more likely to be missing gender? And which that females are more likely to be good superheros than males?

    ```{r gender_alignment_plot, eval=FALSE, echo=TRUE}
    #| message: false
    #| warning: false
    #| eval: false
    #| echo: true
    #| 
    ggplot(data = comics) + # add the data
      geom_bar(mapping = aes(x = Gender, # bar chart of gender
                             fill = Alignment)) +  # colored by alignment
      labs(title = "Gender colored with alignment") # add title
    ```

    ```{r alignment_gender_plot, eval=FALSE, echo=TRUE}
    #| message: false
    #| warning: false
    #| eval: false
    #| echo: true
    #| 
    ggplot(data = comics) + # add the data
      geom_bar(mapping = aes(x = Alignment, # bar chart of alignment
                             fill = Gender)) + # colored by gender
      labs(title = "Alignment colored with gender")  # add title
    ```

    We note that the commonly held belief that gender is a binary is no longer the consensus and that [gender is a complex spectrum](https://blogs.scientificamerican.com/sa-visual/visualizing-sex-as-a-spectrum/).

9.  There are a few characters with missing data "-" in the Alignment and Gender variables? How many are in each?

    ```{r missing_Alignment, eval=FALSE, echo=TRUE}
    #| message: false
    #| warning: false
    #| eval: false
    #| echo: true

    comics %>% 
      INSERT_FUNCTION(INSERT_VARIABLE)
    ```

    ```{r missing_Gender, eval=FALSE, echo=TRUE}
    #| message: false
    #| warning: false
    #| eval: false
    #| echo: true

    comics %>% 
      INSERT_FUNCTION(INSERT_VARIABLE)
    ```

10. Since there are only a few missing values (\<10%) in each category, there is no reason to keep them especially since our analysis is largely about these two variables.

    What does the "!=" function do?

    ```{r filter_comics, eval=FALSE, echo=TRUE}
    #| message: false
    #| warning: false
    #| eval: false
    #| echo: true

    comics_filtered <- # assign a name to a new dataset
      comics %>% # tell R which dataset to start with
      INSERT_FUNCTION(Alignment != "-", # remove "-" values in Alignment
                      Gender != "-") # remove "-" values in Gender
    ```

11. Remake the "Alignment colored with gender" plot and the "Gender colored with alignment" plots with this new dataset.

12. Side-by-side barcharts allow us to represent the counts from a contingency table graphically. Telling `R` to make a side-by-side barchart involves adding the words `position = "dodge`" to the coding from above. Now created the other bar chart side-by-side, the "Gender colored with alignment." use the comics_filter dataset.

    ```{r side_by_side, eval=FALSE, echo=TRUE}
    #| message: false
    #| warning: false
    #| eval: false
    #| echo: true


    ggplot(data = INSERT) + # add the data
      geom_bar(mapping = aes(x = INSERT, # bar chart of alignment
                             fill = INSERT), # colored by gender
               position = INSERT) + # side_by_side
      labs(title = "Alignment colored with gender")  # add title
    ```

    We have been focusing mostly on counts. Another

13. 
